<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Steven&#39;s Blog</title>
        <link>http://tsengsy.github.io/</link>
        <description>Recent content on Steven&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 04 Feb 2021 14:08:03 +1100</lastBuildDate><atom:link href="http://tsengsy.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Different methods to tackle Change Data Capture (CDC) &amp; Data Replication</title>
        <link>http://tsengsy.github.io/p/methods-to-tackle-data-replication/</link>
        <pubDate>Thu, 04 Feb 2021 14:08:03 +1100</pubDate>
        
        <guid>http://tsengsy.github.io/p/methods-to-tackle-data-replication/</guid>
        <description>&lt;img src="http://tsengsy.github.io/p/methods-to-tackle-data-replication/hdd.jpeg" alt="Featured image of post Different methods to tackle Change Data Capture (CDC) &amp; Data Replication" /&gt;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;
All information i write is of my own opinion, and is not reflective of AWS or Amazon.&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why&lt;/h2&gt;
&lt;p&gt;Data replication is the process of making multiple copies of your data and storing this data at multiple locations to improve their accessibility across the network.&lt;/p&gt;
&lt;p&gt;Some situations which you may want to replicate your data may include (but are not limited to):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data flowing from your application to your database needs to be replicated to a data lake or data warehouse&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;d like to replicate data from a database to a secondary database location for Disaster Recovery (DR) processes or to perform Data Analytics&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;p&gt;Common database technologies today either have built-in capabilities, or use third-party tools to accomplish data replication. While Oracle and Microsoft SQL actively support data replication, some other technologies (MySQL / Postgres) may not include this feature out of the box.&lt;/p&gt;
&lt;p&gt;I hope the following gives you some ideas on how you can architect methods to replicate data, both before and after the data hits your data storage solution.&lt;/p&gt;
&lt;h3 id=&#34;1-replicate-the-data-before-the-data-storage-layer&#34;&gt;1. Replicate the data before the data storage layer&lt;/h3&gt;
&lt;p&gt;The first method is potentially the easiest - and that is to replicate the data BEFORE the data storage layer.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By replicating and handling the data before it reaches the data storage medium, you can fan-out the data before managing or changing the configuration of the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You must ensure that the application or processing of this data is strongly consistent, because you are now introducing a potential failure link&lt;/li&gt;
&lt;li&gt;You are responsible to write the code that handles the data that is to be replicated to different mediums.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 142; flex-basis: 341px&#34;&gt;
		&lt;a href=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-001.png&#34; data-size=&#34;760x534&#34;&gt;&lt;img src=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-001.png&#34;
				srcset=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-001_hu54d32dbb10fee4ce08e92728ec2eb179_31460_480x0_resize_box_2.png 480w, http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-001_hu54d32dbb10fee4ce08e92728ec2eb179_31460_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;760&#34;
				height=&#34;534&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Data Replication - Before the storage layer&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Data Replication - Before the storage layer&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-utilise-read-replicas&#34;&gt;2. Utilise Read Replica(s)&lt;/h3&gt;
&lt;p&gt;You may be in a situation where you&amp;rsquo;d rather not handle the data replication, and prefer to rely on read replicas to peform data replication. The benefits of this approach is that by creating a read replica, you can offset read-heavy workloads to the additional copy of your data, reducing the load on your primary instance.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Database managed feature, so no need to write application logic&lt;/li&gt;
&lt;li&gt;Can take advantage of write or read replicas based on workflow requirements&lt;/li&gt;
&lt;li&gt;Read Replicas can be promoted to a master node in the event of a failure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increased cost due to secondary instance&lt;/li&gt;
&lt;li&gt;Homogenous method of replicating data, you&amp;rsquo;ll have to introduce a new method or service to go mysql &amp;ndash;&amp;gt; Postgres for example&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 113; flex-basis: 271px&#34;&gt;
		&lt;a href=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-002.png&#34; data-size=&#34;684x605&#34;&gt;&lt;img src=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-002.png&#34;
				srcset=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-002_hud998e801e4847eba829eba0d99f15b64_40427_480x0_resize_box_2.png 480w, http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-002_hud998e801e4847eba829eba0d99f15b64_40427_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;684&#34;
				height=&#34;605&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Data Replication - Read Replica&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Data Replication - Read Replica&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-aurora-data-activity-streams&#34;&gt;3. Aurora Data Activity Streams&lt;/h3&gt;
&lt;p&gt;If you are using Amazon Aurora Database, you can utilise the &lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Database Activity Streams feature&lt;/a&gt; to provide near real-time streams of activities within the relational database.&lt;/p&gt;
&lt;p&gt;Database Activity Streams are supported for both MySQL and PostgreSQL.&lt;/p&gt;
&lt;h3 id=&#34;4-amazon-data-migration-serice-dms&#34;&gt;4. Amazon Data Migration Serice (DMS)&lt;/h3&gt;
&lt;p&gt;In some instances, you may need to perform a &lt;em&gt;heterogeneous&lt;/em&gt; data replication between different database engines, such as MySQL to Postgres.
The challenges involved with this may prove to be frustrating as you have to build and code your own DB engine translation, or you could use a service such as &lt;!-- raw HTML omitted --&gt;Amazon Data Migration Service (DMS)&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;You could also use DMS as part of your data lake workflow by connecting DMS to your database, and then using AWS Glue to format the data. Ideally you want to always keep a copy of the original data before formatting, as part of your data retention and data lineage strategy.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/blogs/big-data/loading-ongoing-data-lake-changes-with-aws-dms-and-aws-glue/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;This blog highlights this strategy.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 220; flex-basis: 530px&#34;&gt;
		&lt;a href=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-003.png&#34; data-size=&#34;800x362&#34;&gt;&lt;img src=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-003.png&#34;
				srcset=&#34;http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-003_hu788e52a089b160b5de60500b09c6cb5a_75925_480x0_resize_box_2.png 480w, http://tsengsy.github.io/p/methods-to-tackle-data-replication/image-003_hu788e52a089b160b5de60500b09c6cb5a_75925_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;800&#34;
				height=&#34;362&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Data Replication - DMS&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Data Replication - DMS&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-third-party-tools--binlog-replication&#34;&gt;5. Third Party Tools &amp;amp; Binlog Replication&lt;/h3&gt;
&lt;p&gt;You may find yourself in a situation where all of the above is not viable, and you prefer an open source method of data replication. You can look at utilising &lt;a class=&#34;link&#34; href=&#34;https://debezium.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Debezium&lt;/a&gt; or look for other Change Data Capture (CDC) tools.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tackling 25 SSL certificate limits for AWS Application Load Balancers</title>
        <link>http://tsengsy.github.io/p/ssl-limits-alb/</link>
        <pubDate>Thu, 07 Jan 2021 10:58:39 +1100</pubDate>
        
        <guid>http://tsengsy.github.io/p/ssl-limits-alb/</guid>
        <description>&lt;img src="http://tsengsy.github.io/p/ssl-limits-alb/stock_world.jpg" alt="Featured image of post Tackling 25 SSL certificate limits for AWS Application Load Balancers" /&gt;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;
All information i write is of my own opinion, and is not reflective of AWS or Amazon.&lt;/p&gt;
&lt;p&gt;Last year, i&amp;rsquo;ve been in a discussion with a customer about how to manage SSL certificates when you use an Application Load Balancer (ALB). Currently, as of January 07 2021, ALB&amp;rsquo;s have a maximum of 25 SSL certificates.&lt;/p&gt;
&lt;p&gt;However, what happens if you want to host or support more than 25 certificates for your business? Let&amp;rsquo;s work through how we can resolve this.&lt;/p&gt;
&lt;p&gt;The simplest solution to start with might be to use &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rule-Based Routing on Application Load Balancers&lt;/a&gt;&lt;/strong&gt;. This allows you utilise the same 443 port, but &lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/blogs/aws/new-advanced-request-routing-for-aws-application-load-balancers/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;handle path or hostname based routing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 314; flex-basis: 755px&#34;&gt;
		&lt;a href=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image001.jpg&#34; data-size=&#34;1934x614&#34;&gt;&lt;img src=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image001.jpg&#34;
				srcset=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image001_hua4e63d9e3ea4efc62a837c34d070ea56_150154_480x0_resize_q75_box.jpg 480w, http://tsengsy.github.io/p/ssl-limits-alb/image001_hua4e63d9e3ea4efc62a837c34d070ea56_150154_1024x0_resize_q75_box.jpg 1024w&#34;
				width=&#34;1934&#34;
				height=&#34;614&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Rule Based Routing on ALB&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Rule Based Routing on ALB&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;However, lets assume you have the following infrastructure and you are hosting a website for hundreds of customers.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 211; flex-basis: 508px&#34;&gt;
		&lt;a href=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image002.jpg&#34; data-size=&#34;1208x570&#34;&gt;&lt;img src=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image002.jpg&#34;
				srcset=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image002_hu815bb9be7721e93e72b9c88bf043423c_69912_480x0_resize_q75_box.jpg 480w, http://tsengsy.github.io/p/ssl-limits-alb/image002_hu815bb9be7721e93e72b9c88bf043423c_69912_1024x0_resize_q75_box.jpg 1024w&#34;
				width=&#34;1208&#34;
				height=&#34;570&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Example infrastructure&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Example infrastructure&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The difficulties you are experiencing are that for each custom domain, you need an ACM mapping and also there is the 25 limit per ELB. You don&amp;rsquo;t want to keep creating ALBs just for a group of 25 certificates due to cost.&lt;/p&gt;
&lt;h3 id=&#34;the-first-method&#34;&gt;The First Method&lt;/h3&gt;
&lt;p&gt;The first method we can use is to implement CloudFront in-between Elastic beanstalk  and Route53. This means that you can have as many CloudFront distributions that you would like to have, and assign HTTPS on CloudFront, setup ACM and remove the need for SSL to be done on the load balancer. However you can only associate a maximum of 1 SSL/TLS cert with each CloudFront Distribution.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 209; flex-basis: 503px&#34;&gt;
		&lt;a href=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image003.jpg&#34; data-size=&#34;1216x580&#34;&gt;&lt;img src=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image003.jpg&#34;
				srcset=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image003_hu7fba9da1679ce4a56c592454604cb9c1_82402_480x0_resize_q75_box.jpg 480w, http://tsengsy.github.io/p/ssl-limits-alb/image003_hu7fba9da1679ce4a56c592454604cb9c1_82402_1024x0_resize_q75_box.jpg 1024w&#34;
				width=&#34;1216&#34;
				height=&#34;580&#34;
				loading=&#34;lazy&#34;
				alt=&#34;First Solution&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;First Solution&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-second-method&#34;&gt;The Second Method&lt;/h3&gt;
&lt;p&gt;The second method is to implement your own proxy (HAproxy / NGINX). You do have to consider management overhead, plus you cannot take advantage of ACM to perform automated certificate rotation, as ACM only works in conjunction with select AWS services. You’d also want to script the certificate rotation process and have to manage scaling the instance. This is one of the most commonly used methods to work around the 25 cert limit at present.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 211; flex-basis: 506px&#34;&gt;
		&lt;a href=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image004.jpg&#34; data-size=&#34;1072x508&#34;&gt;&lt;img src=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image004.jpg&#34;
				srcset=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image004_hu7fba9da1679ce4a56c592454604cb9c1_66649_480x0_resize_q75_box.jpg 480w, http://tsengsy.github.io/p/ssl-limits-alb/image004_hu7fba9da1679ce4a56c592454604cb9c1_66649_1024x0_resize_q75_box.jpg 1024w&#34;
				width=&#34;1072&#34;
				height=&#34;508&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Second Solution&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Second Solution&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-third-method&#34;&gt;The Third Method&lt;/h3&gt;
&lt;p&gt;The third method is more expensive, but you create multiple ELBs which then route to your elastic beanstalk. I’d be estimating the cost between this solution and the one above if you were going down the SSL proxy / gateway route. Looking to scale this you’d be adding n+1 LB, up to the maximum of 50 load balancers per region.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 207; flex-basis: 498px&#34;&gt;
		&lt;a href=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image005.jpg&#34; data-size=&#34;1370x660&#34;&gt;&lt;img src=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image005.jpg&#34;
				srcset=&#34;http://tsengsy.github.io/p/ssl-limits-alb/image005_hu7fba9da1679ce4a56c592454604cb9c1_96113_480x0_resize_q75_box.jpg 480w, http://tsengsy.github.io/p/ssl-limits-alb/image005_hu7fba9da1679ce4a56c592454604cb9c1_96113_1024x0_resize_q75_box.jpg 1024w&#34;
				width=&#34;1370&#34;
				height=&#34;660&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Third Solution&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Third Solution&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Personally in my opinion, it makes more sense to start with investigating whether the CloudFront route is a viable option, as you really want to remove the hassle of manually rotating certificates. You should remember to also setup an ALIAS record instead of CNAME (reduces the cost), and you could also encrypt the connection between CloudFront and your Elastic Beanstalk endpoint. The encryption is optional as it depends on your security standpoint and whether some websites needs internal encryption.&lt;/p&gt;
&lt;p&gt;There is also a maximum of 200 CloudFront distributions per account, but this can be increased with a support request.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Any questions or concerns? Feel free to reach me at &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;mailto:yiyang.tseng@gmail.com&#34;&gt;yiyang.tseng@gmail.com&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
